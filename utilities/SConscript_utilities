import os
import sys
import subprocess


ROOT_DIR = Dir(os.path.abspath("../"))
BUILD_DIR = ROOT_DIR.Dir("_build", create=True)

UNITY_DIR = ROOT_DIR.Dir("site_scons/site_tools/throwtheswitch/unity")
GENERATE_TEST_RUNNER = UNITY_DIR.File("auto/generate_test_runner.rb")


# helper functions
def build_and_run_tests(build_dir, files, env, source_name):

    module_objs = []
    obj_dir = build_dir.Dir("obj", create=True)
    test_dir = build_dir.Dir("test", create=True)
    obj_filepath = "{path}/{s}.o".format(path=obj_dir.abspath, s=source_name)

    if not os.path.isfile(obj_filepath):
        module_objs += env.Object(target=obj_filepath, source=files["source_file"].abspath)
    else:
        module_objs += [File("{}/{}.o".format(obj_dir.abspath, source_name))]

    Clean(module_objs, "{}/{}.o".format(obj_dir.abspath, source_name))

    if files["test_file"]:
        env.Command(
            source = files["test_file"].abspath,
            target = "{path}/test_{s}_runner.c".format(path=test_dir.abspath, s=source_name),
            action = "ruby {} $SOURCE $TARGET".format(GENERATE_TEST_RUNNER.abspath),
        )

        module_objs += env.Object(target="{path}/test_{s}_runner.o".format(path=test_dir.abspath, s=source_name),
                                source="{path}/test_{s}_runner.c".format(path=test_dir.abspath, s=source_name))
        module_objs += env.Object(target="{path}/test_{s}.o".format(path=test_dir.abspath, s=source_name),
                                    source=files["test_file"].abspath)

        test_file = env.Program(target="{path}/test_{s}.out".format(path=test_dir.abspath, s=source_name), source=unity_obj+module_objs)
        env.Command(target=None, source=test_file, action="./$SOURCE")

    return module_objs


# Using a construction environment instead of an execution environment
env = Environment(
    ENV=os.environ,
    CPPDEFINES="UNITY_INCLUDE_CONFIG_H",
    CPPPATH=[UNITY_DIR.abspath, UNITY_DIR.Dir("src").abspath],
    CCCOMSTR="Compiling static object $TARGET",
    LINKCOMSTR="Linking $TARGET"
)

Import("source_and_dependency_dict")

unity_obj = env.Object("{}/obj/unity.o".format(BUILD_DIR.abspath), "{}/src/unity.c".format(UNITY_DIR.abspath))


# build and test process
for util, source_and_dependencies in source_and_dependency_dict.items():

    env.Append(CPPPATH=source_and_dependencies["include_paths"])
    module_build_dir = BUILD_DIR.Dir(util, create=True)

    for source_name, files in source_and_dependencies["sources"].items():

        submodule_build_dir = module_build_dir.Dir(source_name, create=True)

        build_and_run_tests(submodule_build_dir, files, env, source_name)


        # Building for embedded platform (cross compiling) could happen here
