import os
import sys
import subprocess


ROOT_DIR = os.path.abspath("../")
BUILD_DIR = "{}/_build".format(ROOT_DIR)

UNITY_DIR = os.path.abspath("../site_scons/site_tools/throwtheswitch/unity")
GENERATE_TEST_RUNNER = "{}/auto/generate_test_runner.rb".format(UNITY_DIR)


# Using a construction environment instead of an execution environment
env = Environment(
    ENV=os.environ,
    CPPDEFINES="UNITY_INCLUDE_CONFIG_H",
    CPPPATH=["{}".format(UNITY_DIR), "{}/src".format(UNITY_DIR)],
    CCCOMSTR="Compiling static object $TARGET",
    LINKCOMSTR="Linking $TARGET"
)

Import("source_and_dependency_dict")

unity_obj = env.Object("{}/obj/unity.o".format(BUILD_DIR), "{}/src/unity.c".format(UNITY_DIR))

for util, source_and_dependencies in source_and_dependency_dict.items():

    for include_path in source_and_dependencies["include_paths"]:
        env.Append(CPPPATH=[include_path])

    for source_name, source_paths in source_and_dependencies["sources"].items():

        module_objs = []

        if source_paths["source_path"]:
            module_objs += env.Object(target="{b}/{u}/obj/{s}.o".format(b=BUILD_DIR, u=util, s=source_name),
                                        source=source_paths["source_path"])

            if source_paths["test_path"]:
                env.Command(
                    source = source_paths["test_path"],
                    target = "{b}/{u}/test/{s}/test_{s}_runner.c".format(b=BUILD_DIR, u=util, s=source_name),
                    action = "ruby {} $SOURCE $TARGET".format(GENERATE_TEST_RUNNER),
                )

                module_objs += [
                    env.Object(target="{b}/{u}/test/{s}/test_{s}_runner.o".format(b=BUILD_DIR, u=util, s=source_name),
                                source="{b}/{u}/test/{s}/test_{s}_runner.c".format(b=BUILD_DIR, u=util, s=source_name)),
                    env.Object(target="{b}/{u}/test/{s}/test_{s}.o".format(b=BUILD_DIR, u=util, s=source_name),
                                source=source_paths["test_path"])
                ]

                test_file = env.Program(target="{b}/{u}/test/{s}/test_{s}.out".format(b=BUILD_DIR, u=util, s=source_name), source=unity_obj+module_objs)
                env.Command(target=None, source=test_file, action="./$SOURCE")
                # env.Command(target="{}/results/test_{}.test".format(BUILD_TEST_DIR, module_name), source=test_file, action="./$SOURCE > $TARGET")

# subprocess.run(
#     [
#         "python3",
#         "{}/auto/unity_test_summary.py".format(UNITY_DIR),
#         "{}/results/".format(BUILD_TEST_DIR),
#         "{}/".format(ROOT_DIR)
#     ]
# )
